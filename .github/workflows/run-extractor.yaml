name: Run - Extractor

on:
  workflow_dispatch:
    inputs:
      CONFIGURATION_YAML_PATH:
        description: 'Choose Wether to extract all Apis or extract apis listed an extraction configuration file'     
        required: true
        type: choice
        options:
        - Extract All APIs
        - api_migration/configuration.extractor.yaml
      API_SPECIFICATION_FORMAT:
        description: 'API Specification Format'     
        required: true
        type: choice
        options:
        - OpenAPIV3Yaml 
        - OpenAPIV3Json
        - OpenAPIV2Yaml
        - OpenAPIV2Json

env:
  apiops_release_version: v6.0.1.7
  # The new path for your artifacts
  ARTIFACTS_PATH: api_migration/apimartifacts

jobs:
  extract:
    runs-on: ubuntu-latest
    environment: dev 
    steps:
      - uses: actions/checkout@v4
          
      - name: Run extractor without Config Yaml
        if: ${{ github.event.inputs.CONFIGURATION_YAML_PATH == 'Extract All APIs' }}
        env:
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          AZURE_RESOURCE_GROUP_NAME: ${{ secrets.AZURE_RESOURCE_GROUP_NAME }}
          API_MANAGEMENT_SERVICE_NAME: ${{ secrets.API_MANAGEMENT_SERVICE_NAME }}
          API_MANAGEMENT_SERVICE_OUTPUT_FOLDER_PATH: ${{ github.workspace }}/${{ env.ARTIFACTS_PATH }}
          API_SPECIFICATION_FORMAT: ${{ github.event.inputs.API_SPECIFICATION_FORMAT }} 
        run: |
          Set-StrictMode -Version Latest
          $ErrorActionPreference = "Stop"
          $VerbosePreference = "Continue"
          $InformationPreference = "Continue"

          Write-Information "Setting name variables..."
          $releaseFileName = "extractor-linux-x64.zip"
          $executableFileName = "extractor"

          if ("${{ runner.os }}" -like "*win*") {
            $releaseFileName = "extractor-win-x64.zip"
            $executableFileName = "extractor.exe"
          }
          elseif ("${{ runner.os }}" -like "*mac*") {
            $releaseFileName = "extractor-osx-x64.zip"
          }

          Write-Information "Downloading release..."
          $uri = "https://github.com/Azure/apiops/releases/download/${{ env.apiops_release_version }}/$releaseFileName"
          $downloadFilePath = Join-Path "${{ runner.temp }}" $releaseFileName
          Invoke-WebRequest -Uri "$uri" -OutFile "$downloadFilePath"

          Write-Information "Extracting release..."
          $executableFolderPath = Join-Path "${{ runner.temp }}" "extractor"
          Expand-Archive -Path "$downloadFilePath" -DestinationPath "$executableFolderPath"
          $executableFilePath = Join-Path "$executableFolderPath" $executableFileName

          Write-Information "Setting file permissions..."
          if ("${{ runner.os }}" -like "*linux*")
          {
            & chmod +x "$executableFilePath"
            if ($LASTEXITCODE -ne 0) { throw "Setting file permissions failed."}
          }

          Write-Information "Running extractor..."
          & "$executableFilePath"              
          if ($LASTEXITCODE -ne 0) { throw "Running extractor failed."}

          Write-Information "Execution complete."
        shell: pwsh
      
      - name: Run extractor with Config Yaml
        if: ${{ github.event.inputs.CONFIGURATION_YAML_PATH != 'Extract All APIs' }}
        env:
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          AZURE_RESOURCE_GROUP_NAME: ${{ secrets.AZURE_RESOURCE_GROUP_NAME }}
          API_MANAGEMENT_SERVICE_NAME: ${{ secrets.API_MANAGEMENT_SERVICE_NAME }}
          API_MANAGEMENT_SERVICE_OUTPUT_FOLDER_PATH: ${{ github.workspace }}/${{ env.ARTIFACTS_PATH }}
          API_SPECIFICATION_FORMAT: ${{ github.event.inputs.API_SPECIFICATION_FORMAT }} 
          CONFIGURATION_YAML_PATH:  ${{ github.workspace }}/${{ github.event.inputs.CONFIGURATION_YAML_PATH }}
        run: |
          Set-StrictMode -Version Latest
          $ErrorActionPreference = "Stop"
          $VerbosePreference = "Continue"
          $InformationPreference = "Continue"

          Write-Information "Setting name variables..."
          $releaseFileName = "extractor-linux-x64.zip"
          $executableFileName = "extractor"

          if ("${{ runner.os }}" -like "*win*") {
            $releaseFileName = "extractor-win-x64.zip"
            $executableFileName = "extractor.exe"
          }
          elseif ("${{ runner.os }}" -like "*mac*") {
            $releaseFileName = "extractor-osx-x64.zip"
          }

          Write-Information "Downloading release..."
          $uri = "https://github.com/Azure/apiops/releases/download/${{ env.apiops_release_version }}/$releaseFileName"
          $downloadFilePath = Join-Path "${{ runner.temp }}" $releaseFileName
          Invoke-WebRequest -Uri "$uri" -OutFile "$downloadFilePath"

          Write-Information "Extracting release..."
          $executableFolderPath = Join-Path "${{ runner.temp }}" "extractor"
          Expand-Archive -Path "$downloadFilePath" -DestinationPath "$executableFolderPath"
          $executableFilePath = Join-Path "$executableFolderPath" $executableFileName

          Write-Information "Setting file permissions..."
          if ("${{ runner.os }}" -like "*linux*")
          {
            & chmod +x "$executableFilePath"
            if ($LASTEXITCODE -ne 0) { throw "Setting file permissions failed."}
          }

          Write-Information "Running extractor..."
          & "$executableFilePath"              
          if ($LASTEXITCODE -ne 0) { throw "Running extractor failed."}

          Write-Information "Execution complete."
        shell: pwsh

      - name: publish artifact
        uses: actions/upload-artifact@v4
        with:
          name: apim-artifacts
          path: ${{ env.ARTIFACTS_PATH }}
          
  create-pull-request:
    needs: extract
    runs-on: [ubuntu-latest]
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
          
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: apim-artifacts
          path: ${{ env.ARTIFACTS_PATH }}

      - name: Create artifacts pull request
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "APIOps - Extracted new changes from dev"
          title: "APIOps - Extract from dev environment"
          body: "This PR is auto-generated by the APIOps extractor workflow."
          branch: feature/apim-extract-${{ github.run_id }}
          labels: extract, automated pr

# name: Run - Extractor

# on:
#   workflow_dispatch:
#     inputs:
#       API_MANAGEMENT_ENVIRONMENT:
#         description: 'Choose the environment to extract from.'
#         required: true
#         type: choice
#         options:
#           - dev
#           - prod
#           - qa
#       CONFIGURATION_YAML_PATH:
#         description: 'Choose Wether to extract all Apis or extract apis listed an extraction configuration file'     
#         required: true
#         type: choice
#         options:
#         - Extract All APIs
#         - api_migration/configuration.extractor.yaml
#       API_SPECIFICATION_FORMAT:
#         description: 'API Specification Format'     
#         required: true
#         type: choice
#         options:
#         - OpenAPIV3Yaml 
#         - OpenAPIV3Json
#         - OpenAPIV2Yaml
#         - OpenAPIV2Json

# env:
#   apiops_release_version: v6.0.1.7
#   # The new path for your artifacts
#   ARTIFACTS_PATH: api_migration/apimartifacts

# jobs:
#   extract:
#     runs-on: ubuntu-latest
#     environment: ${{ github.event.inputs.API_MANAGEMENT_ENVIRONMENT }}
#     steps:
#       - uses: actions/checkout@v4

#       - name: Load environment variables
#         run: |
#           ENV_FILE="api_migration/.env.${{ github.event.inputs.API_MANAGEMENT_ENVIRONMENT }}"
#           if [ -f "$ENV_FILE" ]; then
#             echo "Loading environment variables from $ENV_FILE"
#             grep -v '^#' "$ENV_FILE" | xargs -d '\n' -I {} echo "{}" >> $GITHUB_ENV
#           else
#             echo "Error: Environment file $ENV_FILE not found."
#             exit 1
#           fi
#         shell: bash
          
#       - name: Run extractor without Config Yaml
#         if: ${{ github.event.inputs.CONFIGURATION_YAML_PATH == 'Extract All APIs' }}
#         env:
#           AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
#           API_MANAGEMENT_SERVICE_OUTPUT_FOLDER_PATH: ${{ github.workspace }}/${{ env.ARTIFACTS_PATH }}
#           API_SPECIFICATION_FORMAT: ${{ github.event.inputs.API_SPECIFICATION_FORMAT }} 
#         run: |
#           Set-StrictMode -Version Latest
#           $ErrorActionPreference = "Stop"
#           $VerbosePreference = "Continue"
#           $InformationPreference = "Continue"

#           Write-Information "Setting name variables..."
#           $releaseFileName = "extractor-linux-x64.zip"
#           $executableFileName = "extractor"

#           if ("${{ runner.os }}" -like "*win*") {
#             $releaseFileName = "extractor-win-x64.zip"
#             $executableFileName = "extractor.exe"
#           }
#           elseif ("${{ runner.os }}" -like "*mac*") {
#             $releaseFileName = "extractor-osx-x64.zip"
#           }

#           Write-Information "Downloading release..."
#           $uri = "https://github.com/Azure/apiops/releases/download/${{ env.apiops_release_version }}/$releaseFileName"
#           $downloadFilePath = Join-Path "${{ runner.temp }}" $releaseFileName
#           Invoke-WebRequest -Uri "$uri" -OutFile "$downloadFilePath"

#           Write-Information "Extracting release..."
#           $executableFolderPath = Join-Path "${{ runner.temp }}" "extractor"
#           Expand-Archive -Path "$downloadFilePath" -DestinationPath "$executableFolderPath"
#           $executableFilePath = Join-Path "$executableFolderPath" $executableFileName

#           Write-Information "Setting file permissions..."
#           if ("${{ runner.os }}" -like "*linux*")
#           {
#             & chmod +x "$executableFilePath"
#             if ($LASTEXITCODE -ne 0) { throw "Setting file permissions failed."}
#           }

#           Write-Information "Running extractor..."
#           & "$executableFilePath"              
#           if ($LASTEXITCODE -ne 0) { throw "Running extractor failed."}

#           Write-Information "Execution complete."
#         shell: pwsh
      
#       - name: Run extractor with Config Yaml
#         if: ${{ github.event.inputs.CONFIGURATION_YAML_PATH != 'Extract All APIs' }}
#         env:
#           AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
#           API_MANAGEMENT_SERVICE_OUTPUT_FOLDER_PATH: ${{ github.workspace }}/${{ env.ARTIFACTS_PATH }}
#           API_SPECIFICATION_FORMAT: ${{ github.event.inputs.API_SPECIFICATION_FORMAT }} 
#           CONFIGURATION_YAML_PATH:  ${{ github.workspace }}/${{ github.event.inputs.CONFIGURATION_YAML_PATH }}
#         run: |
#           Set-StrictMode -Version Latest
#           $ErrorActionPreference = "Stop"
#           $VerbosePreference = "Continue"
#           $InformationPreference = "Continue"

#           Write-Information "Setting name variables..."
#           $releaseFileName = "extractor-linux-x64.zip"
#           $executableFileName = "extractor"

#           if ("${{ runner.os }}" -like "*win*") {
#             $releaseFileName = "extractor-win-x64.zip"
#             $executableFileName = "extractor.exe"
#           }
#           elseif ("${{ runner.os }}" -like "*mac*") {
#             $releaseFileName = "extractor-osx-x64.zip"
#           }

#           Write-Information "Downloading release..."
#           $uri = "https://github.com/Azure/apiops/releases/download/${{ env.apiops_release_version }}/$releaseFileName"
#           $downloadFilePath = Join-Path "${{ runner.temp }}" $releaseFileName
#           Invoke-WebRequest -Uri "$uri" -OutFile "$downloadFilePath"

#           Write-Information "Extracting release..."
#           $executableFolderPath = Join-Path "${{ runner.temp }}" "extractor"
#           Expand-Archive -Path "$downloadFilePath" -DestinationPath "$executableFolderPath"
#           $executableFilePath = Join-Path "$executableFolderPath" $executableFileName

#           Write-Information "Setting file permissions..."
#           if ("${{ runner.os }}" -like "*linux*")
#           {
#             & chmod +x "$executableFilePath"
#             if ($LASTEXITCODE -ne 0) { throw "Setting file permissions failed."}
#           }

#           Write-Information "Running extractor..."
#           & "$executableFilePath"              
#           if ($LASTEXITCODE -ne 0) { throw "Running extractor failed."}

#           Write-Information "Execution complete."
#         shell: pwsh

#       - name: publish artifact
#         uses: actions/upload-artifact@v4
#         with:
#           name: apim-artifacts
#           path: ${{ env.ARTIFACTS_PATH }}
          
#   create-pull-request:
#     needs: extract
#     runs-on: [ubuntu-latest]
#     permissions:
#       contents: write
#       pull-requests: write
#     steps:
#       - uses: actions/checkout@v4
          
#       - name: Download artifacts
#         uses: actions/download-artifact@v4
#         with:
#           name: apim-artifacts
#           path: ${{ env.ARTIFACTS_PATH }}

#       - name: Create artifacts pull request
#         uses: peter-evans/create-pull-request@v6
#         with:
#           token: ${{ secrets.GITHUB_TOKEN }}
#           commit-message: "APIOps - Extracted new changes from dev"
#           title: "APIOps - Extract from dev environment"
#           body: "This PR is auto-generated by the APIOps extractor workflow."
#           branch: feature/apim-extract-${{ github.run_id }}
#           labels: extract, automated pr