name: Run Publisher for Named Values

on:
  workflow_dispatch:
    inputs:
      API_MANAGEMENT_ENVIRONMENT:
        description: 'Choose the environment to deploy Named Values to.'
        required: true
        type: choice
        options:
          - dev
          - prod
          - qa
      NAMED_VALUE_NAME:
        description: 'Optional: Specify a single Named Value name to deploy. Leave blank to deploy all.'
        required: false
        type: string

env:
  apiops_release_version: v6.0.1.7
  Logging__LogLevel__Default: ${{ vars.LOG_LEVEL || 'Information' }}

jobs:
  publish:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.API_MANAGEMENT_ENVIRONMENT }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Load environment variables
        run: |
          ENV_FILE="api_migration/.env.${{ github.event.inputs.API_MANAGEMENT_ENVIRONMENT }}"
          if [ -f "$ENV_FILE" ]; then
            echo "Loading environment variables from $ENV_FILE"
            grep -v '^#' "$ENV_FILE" | xargs -d '\n' -I {} echo "{}" >> $GITHUB_ENV
          else
            echo "Error: Environment file $ENV_FILE not found."
            exit 1
          fi
        shell: bash

      - name: Prepare artifacts for Named Values only
        run: |
          $tempArtifactsPath = Join-Path "${{ runner.temp }}" "publisher_artifacts_temp"
          $targetNamedValuesPath = Join-Path $tempArtifactsPath "named values"
          New-Item -ItemType Directory -Path $targetNamedValuesPath -Force

          $namedValueName = "${{ github.event.inputs.NAMED_VALUE_NAME }}"
          $sourcePath = "${{ github.workspace }}/api_migration/apimartifacts/named values"

          if (-not [string]::IsNullOrEmpty($namedValueName)) {
            Write-Information "Copying specific Named Value: $namedValueName"
            Copy-Item -Path (Join-Path $sourcePath $namedValueName) -Destination $targetNamedValuesPath -Recurse
          } else {
            Write-Information "Copying all Named Values."
            Copy-Item -Path (Join-Path $sourcePath "*") -Destination $targetNamedValuesPath -Recurse
          }
          echo "API_MANAGEMENT_SERVICE_OUTPUT_FOLDER_PATH=$tempArtifactsPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        shell: pwsh

      - name: Run publisher
        env:
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        run: |
          Set-StrictMode -Version Latest
          $ErrorActionPreference = "Stop"
          $VerbosePreference = "Continue"
          $InformationPreference = "Continue"

          Write-Information "Setting name variables..."
          $releaseFileName = "publisher-linux-x64.zip"
          $executableFileName = "publisher"

          if ("${{ runner.os }}" -like "*win*") {
            $releaseFileName = "publisher-win-x64.zip"
            $executableFileName = "publisher.exe"
          }
          elseif ("${{ runner.os }}" -like "*mac*") {
            $releaseFileName = "publisher-osx-x64.zip"
          }

          Write-Information "Downloading release..."
          $uri = "https://github.com/Azure/apiops/releases/download/${{ env.apiops_release_version }}/$releaseFileName"
          $downloadFilePath = Join-Path "${{ runner.temp }}" $releaseFileName
          Invoke-WebRequest -Uri "$uri" -OutFile "$downloadFilePath"

          Write-Information "Extracting release..."
          $executableFolderPath = Join-Path "${{ runner.temp }}" "publisher"
          Expand-Archive -Path "$downloadFilePath" -DestinationPath "$executableFolderPath"
          $executableFilePath = Join-Path "$executableFolderPath" $executableFileName

          Write-Information "Setting file permissions..."
          if ("${{ runner.os }}" -like "*linux*")
          {
            & chmod +x "$executableFilePath"
            if ($LASTEXITCODE -ne 0) { throw "Setting file permissions failed."}
          }

          Write-Information "Running publisher..."
          & "$executableFilePath"
          if ($LASTEXITCODE -ne 0) { throw "Running publisher failed."}

          Write-Information "Execution complete."
        shell: pwsh