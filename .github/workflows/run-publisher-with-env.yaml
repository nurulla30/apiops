name: Run Publisher with Environment

on:
  workflow_dispatch:
    inputs:
      API_MANAGEMENT_ENVIRONMENT:
        description: 'Choose the environment to deploy to.'
        required: true
        type: choice
        options:
          - dev
          - qa
      API_MANAGEMENT_SERVICE_OUTPUT_FOLDER_PATH:
        description: 'The path to the artifacts folder.'
        required: true
        type: string
        default: 'api_migration/apimartifacts'
      CONFIGURATION_YAML_PATH:
        description: 'The path to the configuration file (e.g., api_migration/configuration.qa.yaml)'
        required: false
        type: string
        default: ''
      COMMIT_ID:
        description: 'The commit ID to use for the deployment (optional).'
        required: false
        type: string
        default: ''

env:
  apiops_release_version: v6.0.1.7
  Logging__LogLevel__Default: ${{ vars.LOG_LEVEL || 'Information' }}

jobs:
  build:
    runs-on: ubuntu-latest
    environment: ${{ inputs.API_MANAGEMENT_ENVIRONMENT }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
    
      - name: 'Run Spectral Linter'
        uses: actions/setup-node@v4
        with:
          node-version: "20"
      - run: npm install -g @stoplight/spectral-cli
      - run: |
          spectral lint ${{ github.workspace }}/${{ inputs.API_MANAGEMENT_SERVICE_OUTPUT_FOLDER_PATH }}/apis/**/*.json --ruleset https://raw.githubusercontent.com/Azure/apiops/main/src/validation/rules.yaml
        continue-on-error: true

      - name: "Perform Token Substitution in Config"
        if: inputs.CONFIGURATION_YAML_PATH != ''
        uses: cschleiden/replace-tokens@v1.3
        with:
          tokenPrefix: "{#"
          tokenSuffix: "#}"
          files: '["${{ inputs.CONFIGURATION_YAML_PATH }}"]'
        env:
          # Example: a secret named 'myNamedValue' in GitHub secrets will replace '{#myNamedValue#}' in the config file
          myNamedValue: ${{ secrets.MY_NAMED_VALUE_SECRET }}

      - name: 'Run Publisher'
        env:
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          AZURE_RESOURCE_GROUP_NAME: ${{ secrets.AZURE_RESOURCE_GROUP_NAME }}
          API_MANAGEMENT_SERVICE_NAME: ${{ secrets.API_MANAGEMENT_SERVICE_NAME }}
          API_MANAGEMENT_SERVICE_OUTPUT_FOLDER_PATH: ${{ github.workspace }}/${{ inputs.API_MANAGEMENT_SERVICE_OUTPUT_FOLDER_PATH }}
          # Pass the config path only if it's provided
          CONFIGURATION_YAML_PATH: ${{ inputs.CONFIGURATION_YAML_PATH != '' && format('{0}/{1}', github.workspace, inputs.CONFIGURATION_YAML_PATH) || '' }}
          COMMIT_ID: ${{ inputs.COMMIT_ID }}
        run: |
          Set-StrictMode -Version Latest
          $ErrorActionPreference = "Stop"
          $VerbosePreference = "Continue"
          $InformationPreference = "Continue"

          Write-Information "Setting name variables..."
          $releaseFileName = "publisher-linux-x64.zip"
          $executableFileName = "publisher"

          if ("${{ runner.os }}" -like "*win*") {
            $releaseFileName = "publisher-win-x64.zip"
            $executableFileName = "publisher.exe"
          }
          elseif ("${{ runner.os }}" -like "*mac*") {
            $releaseFileName = "publisher-osx-x64.zip"
          }
          
          Write-Information "Downloading release..."
          $uri = "https://github.com/Azure/apiops/releases/download/${{ env.apiops_release_version }}/$releaseFileName"
          $downloadFilePath = Join-Path "${{ runner.temp }}" $releaseFileName
          Invoke-WebRequest -Uri "$uri" -OutFile "$downloadFilePath"

          Write-Information "Extracting release..."
          $executableFolderPath = Join-Path "${{ runner.temp }}" "publisher"
          Expand-Archive -Path "$downloadFilePath" -DestinationPath "$executableFolderPath"
          $executableFilePath = Join-Path "$executableFolderPath" $executableFileName

          Write-Information "Setting file permissions..."
          if ("${{ runner.os }}" -like "*linux*")
          {
            & chmod +x "$executableFilePath"
            if ($LASTEXITCODE -ne 0) { throw "Setting file permissions failed."}
          }

          Write-Information "Running publisher..."
          # The publisher executable reads its configuration from environment variables
          # that are set by the env block of this step.
          & "$executableFilePath"              
          if ($LASTEXITCODE -ne 0) { throw "Running publisher failed."}

          Write-Information "Execution complete."
        shell: pwsh
