<on-error>
  <choose>
    <when condition='@((string)context.LastError?.Reason == "OperationNotFound")'>

      <!-- Pull and sanity-check Authorization -->
      <set-variable name="authz"
                    value='@((string)context.Request.Headers.GetValueOrDefault("Authorization"))' />
      <set-variable name="isBearer"
                    value='@(!string.IsNullOrEmpty((string)context.Variables["authz"])
                             && ((string)context.Variables["authz"])
                               .StartsWith("Bearer ", System.StringComparison.OrdinalIgnoreCase))' />
      <set-variable name="token"
                    value='@((bool)context.Variables["isBearer"]
                             ? ((string)context.Variables["authz"]).Substring(7).Trim()
                             : null)' />
      <!-- NEW: must look like a real JWT (three segments) -->
      <set-variable name="parts"
                    value='@(!string.IsNullOrEmpty((string)context.Variables["token"])
                             ? ((string)context.Variables["token"]).Split('.').Length
                             : 0)' />
      <set-variable name="looksLikeJwt"
                    value='@((int)context.Variables["parts"] == 3)' />

      <choose>
        <!-- unauthenticated: no/malformed header OR not a 3-part JWT -->
        <when condition='@(!(bool)context.Variables["isBearer"]
                           || !(bool)context.Variables["looksLikeJwt"])'>
          <return-response>
            <set-status code="401" reason="Unauthorized" />
            <set-header name="WWW-Authenticate" exists-action="override">
              <value>Bearer realm="apim", error="invalid_token", error_description="Authentication required"</value>
            </set-header>
            <set-header name="Content-Type" exists-action="override">
              <value>application/json</value>
            </set-header>
            <set-body>{"error":"Authentication required"}</set-body>
          </return-response>
        </when>

        <!-- looks like a JWT (Bearer + 3 parts) â†’ treat as authenticated, return 404 -->
        <otherwise>
          <return-response>
            <set-status code="404" reason="Not Found" />
            <set-header name="Content-Type" exists-action="override">
              <value>application/json</value>
            </set-header>
            <!-- keep body simple & APIM-friendly -->
            <set-body>{
              "error":"Route not found",
              "method":"@(context.Request.Method)",
              "path":"@(context.Request.OriginalUrl.PathAndQuery)"
            }</set-body>
          </return-response>
        </otherwise>
      </choose>
    </when>
  </choose>
</on-error>
