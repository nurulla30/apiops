<policies>
  <!-- Runs only when a request maps to some API/operation -->
  <inbound>
    <!-- Optional: fast-fail if Authorization header is missing -->
    <choose>
      <when condition='@(!context.Request.Headers.ContainsKey("Authorization"))'>
        <return-response>
          <set-status code="401" reason="Unauthorized" />
          <set-header name="WWW-Authenticate" exists-action="override">
            <value>Bearer realm="apim", error="invalid_token", error_description="Authentication required"</value>
          </set-header>
          <set-header name="Content-Type" exists-action="override">
            <value>application/json</value>
          </set-header>
          <set-body>{"error":"Authentication required"}</set-body>
        </return-response>
      </when>
      <otherwise>
        <!-- Hand off to each API's own inbound policies (e.g., validate-jwt) -->
        <base />
      </otherwise>
    </choose>
  </inbound>

  <backend><base /></backend>
  <outbound><base /></outbound>

  <!-- Runs when NO API/operation matched (e.g., bad base path/route/verb) -->
  <on-error>
    <choose>
      <when condition='@((string)context.LastError?.Reason == "OperationNotFound")'>
        <!-- Look at Authorization to decide 401 vs 404 -->
        <set-variable name="authz"
                      value='@((string)context.Request.Headers.GetValueOrDefault("Authorization"))' />
        <set-variable name="isBearer"
                      value='@(!string.IsNullOrEmpty((string)context.Variables["authz"])
                               && ((string)context.Variables["authz"])
                                 .StartsWith("Bearer ", System.StringComparison.OrdinalIgnoreCase))' />

        <choose>
          <!-- Unauthenticated callers (no/malformed header) → 401 -->
          <when condition='@(!(bool)context.Variables["isBearer"])'>
            <return-response>
              <set-status code="401" reason="Unauthorized" />
              <set-header name="WWW-Authenticate" exists-action="override">
                <value>Bearer realm="apim", error="invalid_token", error_description="Authentication required"</value>
              </set-header>
              <set-header name="Content-Type" exists-action="override">
                <value>application/json</value>
              </set-header>
              <set-body>{"error":"Authentication required"}</set-body>
            </return-response>
          </when>

          <!-- Auth header present (looks like Bearer) → 404 JSON safety net -->
          <otherwise>
            <return-response>
              <set-status code="404" reason="Not Found" />
              <set-header name="Content-Type" exists-action="override">
                <value>application/json</value>
              </set-header>
              <set-body>@{
                var payload = new {
                  error  = "Route not found",
                  method = context.Request.Method,
                  path   = context.Request.OriginalUrl.PathAndQuery
                };
                Newtonsoft.Json.JsonConvert.SerializeObject(payload)
              }</set-body>
            </return-response>
          </otherwise>
        </choose>
      </when>

      <!-- For other errors, keep normal behavior -->
      <otherwise>
        <base />
      </otherwise>
    </choose>
  </on-error>
</policies>
