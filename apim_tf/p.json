<policies>
  <inbound>
    <!-- Optional “header presence” gate for mapped requests -->
    <choose>
      <when condition="@(!context.Request.Headers.ContainsKey("Authorization"))">
        <return-response>
          <set-status code="401" reason="Unauthorized" />
          <set-header name="WWW-Authenticate" exists-action="override">
            <value>Bearer realm="apim", error="invalid_token", error_description="Authentication required"</value>
          </set-header>
          <set-body>{"error":"Authentication required"}</set-body>
        </return-response>
      </when>
      <otherwise>
        <base />
      </otherwise>
    </choose>
  </inbound>

  <backend><base /></backend>
  <outbound><base /></outbound>

  <!-- This runs when NO API/operation matched -->
  <on-error>
    <choose>
      <when condition="@((string)context.LastError?.Reason == "OperationNotFound")">
        <!-- Parse Authorization and (lightly) inspect JWT -->
        <set-variable name="authz" value="@((string)context.Request.Headers.GetValueOrDefault("Authorization"))" />
        <set-variable name="isBearer" value="@(!string.IsNullOrEmpty((string)context.Variables["authz"]) && ((string)context.Variables["authz"]).StartsWith("Bearer "))" />
        <set-variable name="token" value="@(((bool)context.Variables["isBearer"]) ? ((string)context.Variables["authz"]).Substring(7) : null)" />
        <set-variable name="jwtObj" value="@(!string.IsNullOrEmpty((string)context.Variables["token"]) ? jwt((string)context.Variables["token"]) : null)" />
        <set-variable name="isExpired" value="@{
            var j = (IJwt)context.Variables["jwtObj"];
            if (j == null) return true;                    // missing/malformed → unauth
            if (!j.Claims.ContainsKey("exp")) return false;
            var exp = (long)j.Claims["exp"];
            return DateTimeOffset.FromUnixTimeSeconds(exp) <= DateTimeOffset.UtcNow;
        }" />

        <!-- If no usable token → 401; else → 404 JSON safety-net -->
        <choose>
          <when condition="@(!(bool)context.Variables["isBearer"] || (bool)context.Variables["isExpired"])">
            <return-response>
              <set-status code="401" reason="Unauthorized" />
              <set-header name="WWW-Authenticate" exists-action="override">
                <value>Bearer realm="apim", error="invalid_token", error_description="Authentication required"</value>
              </set-header>
              <set-body>{"error":"Authentication required"}</set-body>
            </return-response>
          </when>
          <otherwise>
            <return-response>
              <set-status code="404" reason="Not Found" />
              <set-header name="Content-Type" exists-action="override"><value>application/json</value></set-header>
              <set-body>@{
                var payload = new {
                  error = "Route not found",
                  method = context.Request.Method,
                  path = context.Request.OriginalUrl.PathAndQuery
                };
                return Newtonsoft.Json.JsonConvert.SerializeObject(payload);
              }</set-body>
            </return-response>
          </otherwise>
        </choose>
      </when>
      <otherwise>
        <base />
      </otherwise>
    </choose>
  </on-error>
</policies>
